// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925182519_SeedBooks")]
    partial class SeedBooks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ApiKey = "admin-api-key-1234567890",
                            FirstName = "Super",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("aaa11111-aaaa-1111-aaaa-111111aaaa11"),
                            Author = "Robert C. Martin",
                            Title = "Clean Code",
                            isAvailable = true
                        },
                        new
                        {
                            BookId = new Guid("aaa11111-aaaa-1111-aaaa-111111aaaa12"),
                            Author = "Andrew Hunt & David Thomas",
                            Title = "The Pragmatic Programmer",
                            isAvailable = true
                        },
                        new
                        {
                            BookId = new Guid("aaa11111-aaaa-1111-aaaa-111111aaaa13"),
                            Author = "Erich Gamma et al.",
                            Title = "Design Patterns",
                            isAvailable = true
                        },
                        new
                        {
                            BookId = new Guid("aaa11111-aaaa-1111-aaaa-111111aaaa14"),
                            Author = "Martin Fowler",
                            Title = "Refactoring",
                            isAvailable = true
                        },
                        new
                        {
                            BookId = new Guid("aaa11111-aaaa-1111-aaaa-111111aaaa15"),
                            Author = "Eric Evans",
                            Title = "Domain-Driven Design",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ApiKey = "member-api-key-1234567890",
                            MemberFirstName = "John",
                            MemberLastName = "Doe",
                            Role = "Member"
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.Book", b =>
                {
                    b.HasOne("LibraryApi.Models.Member", "Member")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryApi.Models.Member", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
